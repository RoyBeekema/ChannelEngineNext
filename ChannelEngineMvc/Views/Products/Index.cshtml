@model IEnumerable<MerchantDomain.ProductModel>

@{
    ViewData["Title"] = "Product data";
}

<div class="text-center">
    <h1 class="display-3">Product data</h1>
    <p>Vooraad aanpasbaar via de lelijke knoppen.</p>
    <table class="table table-bordered table-hover">
        <tr>
            <th>Beschrijving</th>
            <th>Product nummer</th>
            <th>Voorraad</th>
            <th>Aanpassen (PartialView)</th>
            <th>Aanpassen (Json)</th>
        </tr>
        @foreach (var d in Model)
        {
            string id = "_" + d.GetHashCode();
            <tr>
                <td>@d.Name</td>
                <td>@d.MerchantProductNo</td>
                <td id="@id">@d.Stock</td>
                <td>
                    <button onclick="setStock1('@id','@d.MerchantProductNo',0); return false;">0</button>
                    <button onclick="setStock1('@id','@d.MerchantProductNo',parseInt(document.getElementById('@id').innerText)-1); return false;">-</button>
                    <button onclick="setStock1('@id','@d.MerchantProductNo',parseInt(document.getElementById('@id').innerText)+1); return false;">+</button>
                    <button onclick="setStock1('@id','@d.MerchantProductNo',25); return false;">25</button>
                </td>
                <td>
                    <button onclick="setStock2('@id','@d.MerchantProductNo',0); return false;">0</button>
                    <button onclick="setStock2('@id','@d.MerchantProductNo',parseInt(document.getElementById('@id').innerText)-1); return false;">-</button>
                    <button onclick="setStock2('@id','@d.MerchantProductNo',parseInt(document.getElementById('@id').innerText)+1); return false;">+</button>
                    <button onclick="setStock2('@id','@d.MerchantProductNo',25); return false;">25</button>
                </td>
            </tr>
        }
    </table>
</div>


@section Scripts {
    <script>

        function setStock1(cellId, merchantProductNo, stock) {
            updateProductsData(cellId, merchantProductNo, 'Stock', stock, 'Post');
        }

        function setStock2(cellId, merchantProductNo, stock) {
            updateProductsData(cellId, merchantProductNo, 'Stock', stock, 'Patch');
        }

        function updateProductsData(cellId, merchantProductNo, property, stock, method) {

            var url = location.href + '/'+method+'?merchantProductNo=' + merchantProductNo + '&property=' + property + '&value=' + stock;

            fetch(url, { method: method })
                .then(function (response) {
                    var contentType = response.headers.get('Content-Type').split(';')[0];

                    switch (contentType)
                    {
                        case 'text/html':
                            return response.text();
                        case 'application/json':
                            return response.json();
                        default:
                            return null;
                    }
                })
                .then(function (result) {

                    if (typeof (result) == 'string')
                        document.getElementsByTagName("main")[0].innerHTML = result;
                    else (typeof (result) == 'object')
                    {
                        for (var i = 0; i < result.length; i++) {
                            var o = result[i];

                            if (o.merchantProductNo == merchantProductNo) {
                                document.getElementById(cellId).innerText = stock;
                            }
                        }
                    }
                })
                .catch((error) => {
                    console.error('Error:', error);
                });
        }

    </script>
}
